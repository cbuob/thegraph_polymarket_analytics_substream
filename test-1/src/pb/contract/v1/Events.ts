// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.3

import { Writer, Reader } from "as-proto/assembly";
import { Polymarketconditionaltokens_ApprovalForAll } from "./Polymarketconditionaltokens_ApprovalForAll";
import { Polymarketconditionaltokens_ConditionPreparation } from "./Polymarketconditionaltokens_ConditionPreparation";
import { Polymarketconditionaltokens_ConditionResolution } from "./Polymarketconditionaltokens_ConditionResolution";
import { Polymarketconditionaltokens_PayoutRedemption } from "./Polymarketconditionaltokens_PayoutRedemption";
import { Polymarketconditionaltokens_PositionSplit } from "./Polymarketconditionaltokens_PositionSplit";
import { Polymarketconditionaltokens_PositionsMerge } from "./Polymarketconditionaltokens_PositionsMerge";
import { Polymarketconditionaltokens_TransferBatch } from "./Polymarketconditionaltokens_TransferBatch";
import { Polymarketconditionaltokens_TransferSingle } from "./Polymarketconditionaltokens_TransferSingle";
import { Polymarketconditionaltokens_Uri } from "./Polymarketconditionaltokens_Uri";

export class Events {
  static encode(message: Events, writer: Writer): void {
    const polymarketconditionaltokensApprovalForAlls =
      message.polymarketconditionaltokensApprovalForAlls;
    for (
      let i: i32 = 0;
      i < polymarketconditionaltokensApprovalForAlls.length;
      ++i
    ) {
      writer.uint32(10);
      writer.fork();
      Polymarketconditionaltokens_ApprovalForAll.encode(
        polymarketconditionaltokensApprovalForAlls[i],
        writer
      );
      writer.ldelim();
    }

    const polymarketconditionaltokensConditionPreparations =
      message.polymarketconditionaltokensConditionPreparations;
    for (
      let i: i32 = 0;
      i < polymarketconditionaltokensConditionPreparations.length;
      ++i
    ) {
      writer.uint32(18);
      writer.fork();
      Polymarketconditionaltokens_ConditionPreparation.encode(
        polymarketconditionaltokensConditionPreparations[i],
        writer
      );
      writer.ldelim();
    }

    const polymarketconditionaltokensConditionResolutions =
      message.polymarketconditionaltokensConditionResolutions;
    for (
      let i: i32 = 0;
      i < polymarketconditionaltokensConditionResolutions.length;
      ++i
    ) {
      writer.uint32(26);
      writer.fork();
      Polymarketconditionaltokens_ConditionResolution.encode(
        polymarketconditionaltokensConditionResolutions[i],
        writer
      );
      writer.ldelim();
    }

    const polymarketconditionaltokensPayoutRedemptions =
      message.polymarketconditionaltokensPayoutRedemptions;
    for (
      let i: i32 = 0;
      i < polymarketconditionaltokensPayoutRedemptions.length;
      ++i
    ) {
      writer.uint32(34);
      writer.fork();
      Polymarketconditionaltokens_PayoutRedemption.encode(
        polymarketconditionaltokensPayoutRedemptions[i],
        writer
      );
      writer.ldelim();
    }

    const polymarketconditionaltokensPositionSplits =
      message.polymarketconditionaltokensPositionSplits;
    for (
      let i: i32 = 0;
      i < polymarketconditionaltokensPositionSplits.length;
      ++i
    ) {
      writer.uint32(42);
      writer.fork();
      Polymarketconditionaltokens_PositionSplit.encode(
        polymarketconditionaltokensPositionSplits[i],
        writer
      );
      writer.ldelim();
    }

    const polymarketconditionaltokensPositionsMerges =
      message.polymarketconditionaltokensPositionsMerges;
    for (
      let i: i32 = 0;
      i < polymarketconditionaltokensPositionsMerges.length;
      ++i
    ) {
      writer.uint32(50);
      writer.fork();
      Polymarketconditionaltokens_PositionsMerge.encode(
        polymarketconditionaltokensPositionsMerges[i],
        writer
      );
      writer.ldelim();
    }

    const polymarketconditionaltokensTransferBatches =
      message.polymarketconditionaltokensTransferBatches;
    for (
      let i: i32 = 0;
      i < polymarketconditionaltokensTransferBatches.length;
      ++i
    ) {
      writer.uint32(58);
      writer.fork();
      Polymarketconditionaltokens_TransferBatch.encode(
        polymarketconditionaltokensTransferBatches[i],
        writer
      );
      writer.ldelim();
    }

    const polymarketconditionaltokensTransferSingles =
      message.polymarketconditionaltokensTransferSingles;
    for (
      let i: i32 = 0;
      i < polymarketconditionaltokensTransferSingles.length;
      ++i
    ) {
      writer.uint32(66);
      writer.fork();
      Polymarketconditionaltokens_TransferSingle.encode(
        polymarketconditionaltokensTransferSingles[i],
        writer
      );
      writer.ldelim();
    }

    const polymarketconditionaltokensUris =
      message.polymarketconditionaltokensUris;
    for (let i: i32 = 0; i < polymarketconditionaltokensUris.length; ++i) {
      writer.uint32(74);
      writer.fork();
      Polymarketconditionaltokens_Uri.encode(
        polymarketconditionaltokensUris[i],
        writer
      );
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): Events {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Events();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.polymarketconditionaltokensApprovalForAlls.push(
            Polymarketconditionaltokens_ApprovalForAll.decode(
              reader,
              reader.uint32()
            )
          );
          break;

        case 2:
          message.polymarketconditionaltokensConditionPreparations.push(
            Polymarketconditionaltokens_ConditionPreparation.decode(
              reader,
              reader.uint32()
            )
          );
          break;

        case 3:
          message.polymarketconditionaltokensConditionResolutions.push(
            Polymarketconditionaltokens_ConditionResolution.decode(
              reader,
              reader.uint32()
            )
          );
          break;

        case 4:
          message.polymarketconditionaltokensPayoutRedemptions.push(
            Polymarketconditionaltokens_PayoutRedemption.decode(
              reader,
              reader.uint32()
            )
          );
          break;

        case 5:
          message.polymarketconditionaltokensPositionSplits.push(
            Polymarketconditionaltokens_PositionSplit.decode(
              reader,
              reader.uint32()
            )
          );
          break;

        case 6:
          message.polymarketconditionaltokensPositionsMerges.push(
            Polymarketconditionaltokens_PositionsMerge.decode(
              reader,
              reader.uint32()
            )
          );
          break;

        case 7:
          message.polymarketconditionaltokensTransferBatches.push(
            Polymarketconditionaltokens_TransferBatch.decode(
              reader,
              reader.uint32()
            )
          );
          break;

        case 8:
          message.polymarketconditionaltokensTransferSingles.push(
            Polymarketconditionaltokens_TransferSingle.decode(
              reader,
              reader.uint32()
            )
          );
          break;

        case 9:
          message.polymarketconditionaltokensUris.push(
            Polymarketconditionaltokens_Uri.decode(reader, reader.uint32())
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  polymarketconditionaltokensApprovalForAlls: Array<Polymarketconditionaltokens_ApprovalForAll>;
  polymarketconditionaltokensConditionPreparations: Array<Polymarketconditionaltokens_ConditionPreparation>;
  polymarketconditionaltokensConditionResolutions: Array<Polymarketconditionaltokens_ConditionResolution>;
  polymarketconditionaltokensPayoutRedemptions: Array<Polymarketconditionaltokens_PayoutRedemption>;
  polymarketconditionaltokensPositionSplits: Array<Polymarketconditionaltokens_PositionSplit>;
  polymarketconditionaltokensPositionsMerges: Array<Polymarketconditionaltokens_PositionsMerge>;
  polymarketconditionaltokensTransferBatches: Array<Polymarketconditionaltokens_TransferBatch>;
  polymarketconditionaltokensTransferSingles: Array<Polymarketconditionaltokens_TransferSingle>;
  polymarketconditionaltokensUris: Array<Polymarketconditionaltokens_Uri>;

  constructor(
    polymarketconditionaltokensApprovalForAlls: Array<Polymarketconditionaltokens_ApprovalForAll> = [],
    polymarketconditionaltokensConditionPreparations: Array<Polymarketconditionaltokens_ConditionPreparation> = [],
    polymarketconditionaltokensConditionResolutions: Array<Polymarketconditionaltokens_ConditionResolution> = [],
    polymarketconditionaltokensPayoutRedemptions: Array<Polymarketconditionaltokens_PayoutRedemption> = [],
    polymarketconditionaltokensPositionSplits: Array<Polymarketconditionaltokens_PositionSplit> = [],
    polymarketconditionaltokensPositionsMerges: Array<Polymarketconditionaltokens_PositionsMerge> = [],
    polymarketconditionaltokensTransferBatches: Array<Polymarketconditionaltokens_TransferBatch> = [],
    polymarketconditionaltokensTransferSingles: Array<Polymarketconditionaltokens_TransferSingle> = [],
    polymarketconditionaltokensUris: Array<Polymarketconditionaltokens_Uri> = []
  ) {
    this.polymarketconditionaltokensApprovalForAlls =
      polymarketconditionaltokensApprovalForAlls;
    this.polymarketconditionaltokensConditionPreparations =
      polymarketconditionaltokensConditionPreparations;
    this.polymarketconditionaltokensConditionResolutions =
      polymarketconditionaltokensConditionResolutions;
    this.polymarketconditionaltokensPayoutRedemptions =
      polymarketconditionaltokensPayoutRedemptions;
    this.polymarketconditionaltokensPositionSplits =
      polymarketconditionaltokensPositionSplits;
    this.polymarketconditionaltokensPositionsMerges =
      polymarketconditionaltokensPositionsMerges;
    this.polymarketconditionaltokensTransferBatches =
      polymarketconditionaltokensTransferBatches;
    this.polymarketconditionaltokensTransferSingles =
      polymarketconditionaltokensTransferSingles;
    this.polymarketconditionaltokensUris = polymarketconditionaltokensUris;
  }
}
